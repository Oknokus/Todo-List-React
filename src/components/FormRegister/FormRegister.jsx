import {Link, useLocation} from 'react-router-dom';
import {useForm} from 'react-hook-form';
import { useContext, useState, useRef } from 'react';

import {CustumContext} from "../../Config/Contex";


import styles from './FormRegister.module.css';


const FormRegister = () => {
    const[passwordView, setPasswordView] = useState(false);

    const {
        register,
        handleSubmit,
            formState: {
                errors
        }, watch
    } = useForm({mode: "onblur"});
   
    const {
        onSubmit,       
        user
    } = useContext(CustumContext);
      
    const location = useLocation();
    const password = useRef();
    password.current = watch("password", "");
    
    return (
        <>
            <div className={styles.register_container}>
                <form className={styles.container_form} onSubmit={handleSubmit(onSubmit)} noValidate>
                    <h1 className={styles.container_formTitle}>
                        {
                            location.pathname === "/register" ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" : "–í—Ö–æ–¥"
                        } 
                    </h1>
                        {
                            location.pathname === "/register" ? 
                                <label>
                                    <span>{errors.login && errors.login.message}</span>  

                                    <input {...register("login", {
                                        required : {
                                            message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ",
                                            value: true
                                        },
                                        maxLength : {
                                            message: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ 10",
                                            value: 10 
                                        }, 
                                        minLength : {
                                            message: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ 3",
                                            value: 3
                                        }
                                    })}  className={styles.container_formInput} type="text" placeholder='–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'/> 
                                </label>   : ""
                        }                      

                        <label>
                            <span className='login-container__form__errors'>{errors.email && errors.email.message}</span> 

                            <input {...register("email", {
                                required : {
                                    message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ",
                                    value: true
                                },
                                minLength : {
                                    message: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ 10",
                                    value: 10 
                                }, 
                                pattern : {
                                    message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                                    value: /^[^ ]+@[^ ]+\.[a-z]{2,5}$/
                                }                          
                            })}  className={styles.container_formInput} type="email" placeholder='–í–≤–µ–¥–∏—Ç–µ Email'/>
                        </label>   

                        <label>
                            <span>{errors.password && errors.password.message}</span>

                            <input {...register("password", {
                                required : {
                                    message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ",
                                    value: true
                                },
                                minLength : {
                                    message: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ 10",
                                    value: 10 
                                }, 
                                pattern : {
                                    message: "–ü–∞—Ä–æ–ª  –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–∏–µ 8 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, —á–∏—Å–ª–æ!",
                                    value: /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{8,}/g
                                }
                            })}  className={styles.container_formInput}  type={passwordView ? "text" : "password"} placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'/>
                                <span 
                                    className={styles.container_inputSpan}
                                    onClick={() => setPasswordView(prev => !prev)}>üóÅ
                                </span>                             
                        </label> 

                        {
                            location.pathname==="/register" &&                
                            <label className={styles.form_container_label}>
                                <span>{errors.passwordConfirm && errors.passwordConfirm.message}</span> 
                            
                                <input {...register("passwordConfirm", {
                                        validate: value => 
                                        value === password.current || "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç" }
                                        )} 
                                    className={styles.container_formInput}         
                                    type="password" placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å" /> 
                            </label>
                        }  
   
                        <label>   
                            <button className={styles.container_formBtn} type="submit">
                                {
                                    location.pathname === "/register" ? "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–í–æ–π—Ç–∏"
                                } 
                            </button>
                        </label>

                        <p className={styles.container_formLinkPage}>
                            {
                                location.pathname === "/register" ? 
                                    <>–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç —á—Ç–æ–±—ã <Link to="/login" className={styles.container__formLink}>_–í–æ–π—Ç–∏</Link></> 
                                    : <>–ï—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ? <Link to="/register" className={styles.container__formLink}>_–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</Link></>
                            }
                        </p>
                </form>                
            </div>
        </>
    )
};

export default FormRegister;